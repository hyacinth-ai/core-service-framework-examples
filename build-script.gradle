// plugins {
// id 'org.springframework.boot' version '2.1.3.RELEASE'
// id "com.jfrog.bintray" version "1.+"
// id "org.flywaydb.flyway" version "5.2.4"
// }

// repositories {
//     maven { url 'https://repo.spring.io/libs-milestone' }
// }

//task allDependencies {
//    dependsOn allprojects.collect { "$it.path:dependencies" }
//}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        // maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE'
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0"
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:5.2.4"
    }
}

task("dotDependencies") {
    doLast {
        def file = new File("${project.projectDir}/project-dependencies.dot")
        file.delete()
        file << "digraph {\n"
        file << "splines=ortho\n"
        file << "ratio=0.6\n"

        rootProject.childProjects.each { item ->
            def from = item.value
            file << "\"${from.name}\"\n"
            from.configurations.compile.dependencies
                    .matching { it in ProjectDependency }
                    .each { to -> file << ("\"${from.name}\" -> \"${to.name}\"\n") }
        }
        file << "}\n"
    }
}

task("buildAll") {
    dependsOn(
        subprojects
            .collect({ sp -> ":${sp.name}" })
            .collect({ it + ':' + ((it.endsWith('server') || it.endsWith('service')) ? 'bootJar' : 'jar')})
    )
}

task("publishAll") {
    dependsOn(
        subprojects
            .collect({ it.name })
            .findAll({ it.startsWith('core-service') })
            .collect({ it + ':publish' })
    )
}

task("bintrayUploadAll") {
    dependsOn(
        subprojects
            .collect({ it.name })
            .findAll({ it.startsWith('core-service') })
            .collect({ it + ':bintrayUpload' })
    )
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    // apply plugin: 'maven'
    // apply plugin: 'groovy'
    // apply plugin: org.sonarqube.gradle.SonarQubePlugin

    apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
    apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin
    apply plugin: com.gorylenko.GitPropertiesPlugin
    apply plugin: com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormatPlugin
    apply plugin: org.flywaydb.gradle.FlywayPlugin
    apply plugin: com.jfrog.bintray.gradle.BintrayPlugin

    ext {
        set('springCloudVersion', 'Greenwich.SR2')
    }

//    dependencies {
//        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//        implementation 'org.springframework.boot:spring-boot-starter-web'
//        implementation 'org.springframework.cloud:spring-cloud-config-server'
//        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//        implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//        testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
        dependencies {
            dependency 'io.swagger:swagger-annotations:1.5.22'
            dependency 'org.projectlombok:lombok:1.18.6'
            dependency 'io.springfox:springfox-swagger2:2.9.2'
            dependency 'io.springfox:springfox-swagger-ui:2.9.2'
            dependency 'com.google.code.findbugs:jsr305:3.0.0'
            dependency 'com.vladmihalcea:hibernate-types-52:2.4.3'
            dependency 'io.jsonwebtoken:jjwt-api:0.10.6'
            dependency 'io.jsonwebtoken:jjwt-impl:0.10.6'
            dependency 'io.jsonwebtoken:jjwt-jackson:0.10.6'
            dependency 'de.codecentric:spring-boot-admin-starter-server:2.1.4'
            dependency 'net.logstash.logback:logstash-logback-encoder:5.3'
            // dependency 'javax.servlet:javax.servlet-api:3.1.0'
        }
    }

    repositories {
        maven { url 'https://repo.spring.io/libs-milestone' }
    }

    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.fork = true
        options.compilerArgs += ['-parameters', '-Xlint:unchecked']
    }

    jar { enabled = true }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava // allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    flyway {
        cleanDisabled = true
    }

    bootJar {
        classifier = 'boot'
        enabled = false
    }

    wrapper {
        description 'creates gradle wrapper in order to execute ./gradlew <task>'
        gradleVersion = '5.4'
        distributionUrl= 'https://services.gradle.org/distributions/gradle-5.4-all.zip'
    }

    bootRun { systemProperties System.properties }

    generateGitProperties { enabled = false }

    if (project.findProperty('PUBLISHING_ENABLED') != null) {

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact tasks.sourcesJar
                    artifact tasks.javadocJar
                    if (project.name.endsWith('server')) {
                        // artifact tasks.bootJar
                    }
                    // groupId project.group
                    // artifactId project.name
                    // version project.version
                    pom {
                        name = "${project.group}:${project.name}"
                        description = project.description ?: "${project.group}:${project.name}"
                        url = project.PUBLISHING_SCM
                        licenses {
                            license {
                                name = project.PUBLISHING_LICENSE
                                url = project.PUBLISHING_LICENSE_URL
                            }
                        }
                        developers {
                            developer {
                                id = project.PUBLISHING_DEVELOPER_ID
                                name = project.PUBLISHING_DEVELOPER_NAME
                                email = project.PUBLISHING_DEVELOPER_EMAIL
                            }
                        }
                        scm {
                            connection = project.PUBLISHING_SCM
                            developerConnection = project.PUBLISHING_SCM
                            url = project.PUBLISHING_SCM
                        }
                    }
                }
            }

            repositories {
                maven {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2" // "$buildDir/repos/releases"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots" // "$buildDir/repos/snapshots"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = project.OSSRH_USERNAME
                        password = project.OSSRH_PASSWORD
                    }
                }
            }
        }

        if (project.PUBLISHING_TARGET.equals("sonatype")) {
            signing {
                sign publishing.publications.mavenJava
            }
        }

        if (project.PUBLISHING_TARGET.equals("bintray")) {
            bintray {
                user = project.BINTRAY_USER
                key = project.BINTRAY_API_KEY
                publish = Boolean.parseBoolean(project.BINTRAY_PUBLISH)
                pkg {
                    repo = project.BINTRAY_REPO
                    name = project.BINTRAY_PKG_NAME ?: "${project.group}:${project.name}"
                    licenses = [project.PUBLISHING_LICENSE]
                    vcsUrl = project.PUBLISHING_SCM
                    userOrg =  project.BINTRAY_ORG
                }
                publications = ['mavenJava']
            }
        }
    }

    if (project.name.endsWith('service') || project.name.endsWith('server')) {
        defaultTasks 'bootJar'

        bootJar {
            classifier = 'boot'
            enabled = true
        }

        springBoot {
            buildInfo {
                properties {
                    // additional = System.properties
                }
            }
        }

        generateGitProperties { enabled = new File('.git').exists() }
    } else {
        defaultTasks 'jar'
    }

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    dependencies {
        annotationProcessor "org.projectlombok:lombok"

        compile 'org.projectlombok:lombok'
        compile 'org.slf4j:log4j-over-slf4j'
        compile 'javax.xml.bind:jaxb-api'
        compile 'org.glassfish.jaxb:jaxb-runtime'
    }
}
